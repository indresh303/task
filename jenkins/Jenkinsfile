pipeline {
    agent any

    environment {
        DOCKER_REPO = "bindreshbabu/task-webapp"
        IMAGE_TAG = "v${BUILD_NUMBER}"  // unique image tag per build
        FULL_IMAGE = "${DOCKER_REPO}:${IMAGE_TAG}"
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/indresh303/task.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build --no-cache -t $FULL_IMAGE -f app/Dockerfile .'

            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $FULL_IMAGE
                    '''
                }
            }
        }

        stage('Login to Azure') {
            steps {
                withCredentials([string(credentialsId: 'AZURE_CREDENTIALS_JSON', variable: 'AZURE_CREDENTIALS')]) {
                    sh '''
                        echo "$AZURE_CREDENTIALS" > azure-creds.json
                        az login --service-principal \
                            --username $(jq -r .clientId azure-creds.json) \
                            --password $(jq -r .clientSecret azure-creds.json) \
                            --tenant $(jq -r .tenantId azure-creds.json)
                    '''
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                script {
                    sh """
                        az aks get-credentials --resource-group indresh --name task
                        sed 's|__IMAGE__|${FULL_IMAGE}|' k8s/deployment.yaml > k8s/deployment-updated.yaml
                        kubectl apply -f k8s/namespace.yaml
                        kubectl apply -f k8s/deployment-updated.yaml
                        kubectl apply -f k8s/service.yaml
                        kubectl rollout restart deployment flask-deployment -n flask-ns
                    """
                }
            }
        }
    }
}
